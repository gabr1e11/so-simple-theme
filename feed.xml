<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text"></title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://www.robertocano.es/feed.xml" />
<link rel="alternate" type="text/html" href="http://www.robertocano.es" />
<updated>2021-09-20T17:28:26+02:00</updated>
<id>http://www.robertocano.es/</id>
<author>
  <name>Roberto Cano</name>
  <uri>http://www.robertocano.es/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[Mastering the improbability engine]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/improbability-engine/" />
  <id>http://www.robertocano.es/en/improbability-engine</id>
  <published>2017-04-13T00:00:00+02:00</published>
  <updated>2017-04-13T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;well-what&quot;&gt;Well, what?&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;

&lt;p&gt;Hey! I’m back! Thanks, thanks, don’t need to applaud. I know, I know. It’s been literally months
and suddenly I’m publishing more often! I’ve been extremely busy these last months, some good things
and some bad have happened during this period. Luckily the good ones are kicking the bad ones’ asses!&lt;/p&gt;

&lt;p&gt;But finally I’m back and I will try to get regular! &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I’m doing so many things lately that I don’t actually have much time to edit this blog as often as it
deserves, but I will try to at least update it ever 2 or 3 months, just so you know.&lt;/p&gt;

&lt;p&gt;This post is about how to get a job in the videogame industry when you are a complete outsider. If you prefer
to skip my usual digression, you can jump directly &lt;a href=&quot;#how-to-become-a-videogame-developer-when-you-are-already-35&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;

&lt;p&gt;As life wants it, this post was originally destined to be a &lt;em&gt;How to write your own 3D engine in
OpenGL for dummies&lt;/em&gt; post. I was gonna rant about the challenges and subtleties of writing an engine
in C++ for the OpenGL API while keeping it multi-platform and multi-API. It was also going to showcase
some nice techniques I had learned in the process.&lt;/p&gt;

&lt;p&gt;However I’m not going to do it. No sir. No, no, no, no.&lt;/p&gt;

&lt;p&gt;And ‘Why?’ would the sharp reader of this blog wonder astonished.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, perhaps I’m overestimating the audience of my blog. In any case the reason is simple, although not so
much my answer which, as usual, will be given in a roundabout manner.&lt;/p&gt;

&lt;h1 id=&quot;when-i-was-a-kid&quot;&gt;When I was a kid&lt;/h1&gt;

&lt;p&gt;Oh, yeah. We are starting from the beginning.&lt;/p&gt;

&lt;p&gt;It was 1992. The year that the Atari 9600, my dear Atari, was finally discontinued. Achy Breaky Heart, the catchy
song of the father of Miley Cyrus&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, introduced Country music to a whole new generation. Definitely not mine.
And Aladdin, the Disney movie, taught us how to find our true love by lying, deceiving and using a secret dark
power hidden in a lamp. Neat!&lt;/p&gt;

&lt;p&gt;At the same time, I, a young underdeveloped developer, was made the recipient of a wonderful present: a Spectrum 128K +2A
computer with incorporated tape reader!! I was ecstatic. Since I was 10 I wanted one of those fancy machines for me, after
seeing my cousin handling one of those beauties!&lt;/p&gt;

&lt;p&gt;When I got it, the first thing I tried was a game&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Then another game&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. And then, after learning a bit of BASIC programming,
I tried to write my own game!! In BASIC! Using ASCII! Never heard of system routines, graphic mode or assembler. Who figures!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wow, master! Did you succeed in such a grandiose task?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No. But remember Timmy, I’m the eloquent fella around here.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I tried, but never really managed to make anything interesting. However my passion for videogames stuck with me
like used chewing gum sticks to a shoe sole after you step on it on the street.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yuck!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s fast forward many years into the future. Let’s time travel to 1998! I started university at the &lt;em&gt;Universidad Autónoma de
Madrid&lt;/em&gt;, and during the 3rd year I picked a really interesting course: graphics programming. With a couple of friends we
started writing a software 3D engine. Those were really good times. Just with access to the framebuffer we started
implementing polygon rendering, flat and Gouraud lighting, and even texture mapping! It was lovely. We even managed to import
Quake 3 world models and navigate through them in our engine! It was amazing!! Later on we tried to implement a BSP compiler&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;However the pressure I had with all the other courses and the need to finish the career to start working and start earning good money
crippled my dream of becoming a game developer. Game developer jobs were sparse in Spain, not well paid, with many working hours,
barely any recognition…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So basically the same as today for any game developer job ever…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, yes, but that’s not the point! Things were really bad in Spain at the time, and I didn’t know a single bit of the overwhelmingly
awesome English I know today, so going abroad to work was out of the question.&lt;/p&gt;

&lt;p&gt;The end result was that I started working in a radar company, I enjoyed myself and the money….and kind of forgot about my
childhood dream!&lt;/p&gt;

&lt;h1 id=&quot;enter-2015&quot;&gt;Enter 2015&lt;/h1&gt;

&lt;p&gt;Time travel! Again! This is one of the most exciting posts ever!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you say so…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was 2015, and I was trying to figure out what to do with my professional life. After 12 years of working with C, C++,
Linux, embedded environments and stuff like that, I was starting to get a bit bored of the same drill. Security systems were
starting to catch my attention. However I was always missing something. I’m a very visual person and security systems are
all about system programming where UI or user interaction is sparse. Also I was missing the feeling of knowing that somebody
was interacting with my software in a meaningful way. In security, if your product is very good, the user never notices it!
Then suddenly an idea crossed my mind.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To stop writing annoyingly lengthy post that seem to never end?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No. Good try. But no. Could I, perhaps, in the peak of my game, perform a complete career change and make my childhood dream
of becoming a game developer come true? I decided I had to try. I had to give myself the opportunity to at least try. So
I put all my attention into it and started working on a plan.&lt;/p&gt;

&lt;h1 id=&quot;how-to-become-a-videogame-developer-when-you-are-already-35&quot;&gt;How to become a videogame developer when you are already 35&lt;/h1&gt;

&lt;p&gt;The big question for me was: how can I capitalize on my expertise to steer my career into the direction I want? I knew nothing
about design, professional game engines, UI or monetization. My expertise was in low-level systems, Linux, C++ and a life-long
passion for programming. I also had some rare qualities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I love low-level stuff at assembler level as well as very high-level stuff like 3D APIs and complex systems. Give me an engine,
an OpenGL API and some low-level optimizations to work on and I’m happy!&lt;/li&gt;
  &lt;li&gt;I’m a developer. I’m social. I’ll say it again: I’m a developer and I’m really social. I didn’t know but apparently that
is a rare combination. Anyhow I’d like to think that less and less nowadays. But it is true I can lock myself in a room and write
code for 3 days and then get out and do a presentation in front of 50 people. I love both things!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all this in mind I decided that the way to go was the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I need to demonstrate my skills in C++ and low-level knowledge, so I will write an engine in C++ with OpenGL&lt;/li&gt;
  &lt;li&gt;I need also to demonstrate my multi-platform/multi-architecture skills, so my engine will compile for Windows, Linux and Mac.
It will also have an architecture that allows different APIs to be added, like DirectX&lt;/li&gt;
  &lt;li&gt;I need to capitalize on my social skills, so I will attend major or interesting videogame conferences to meet people
and understand how far I am from becoming a videogame developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that is what I did. For a year and a half. I started writing my own C++ engine. You can find the sources in my GitHub. It was
quite a challenge, as I had never done anything like that. But it was an amazing experience, and quite a lot of fun!&lt;/p&gt;

&lt;p&gt;It indeed compiled for Windows, Mac and Linux. I implemented model and texture loading and rendering, Blinn-Phong lighting, HDR,
procedural geometries, Bloom effect, Shadow mapping and some other shaders effects.&lt;/p&gt;

&lt;p&gt;I also went to several conferences: GDC Europe, Unite, Respawn, Screenshake. I started reading more news about videogame development,
subscribing to videogame jobs websites, contacting people to see what kind of opportunities were out there. With all this work, and
1 year and a half into my plan, I got the first tangible outcome: an interview at Guerrilla Games, in Amsterdam. Guerrilla Games!!!!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Guerrilla Games!!!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guerrilla games!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I heard you, stop shouting!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was incredibly excited. I had worked really hard for a long time, almost every day in the evening sitting for a couple of hours
writing my engine, learning about techniques, reading papers, etc… And finally I had the interview of my life!! This interview,
by the way, came through somebody I knew at GDC Europe. Never underestimate the power of networking!&lt;/p&gt;

&lt;p&gt;I prepared for the interview as best as I could and there I went, not knowing exactly what to expect.&lt;/p&gt;

&lt;p&gt;The guys at Guerrilla were really kind to me. They welcomed me and then brought me to the interview room. Two technical leads
were going to interview me. I was already thinking that I had a real chance to make it into one of the most important AAA studios
in the world! After 15 minutes of interview we were done: I wasn’t going to make it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was eye opening. They were really nice to me and after the first 15 minutes they spent another 45 trying to see if they could
fit me anywhere in the company, or in any other company in Netherlands, but it didn’t work.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What happened?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gist of it is that I was lacking a lot of experience for the kind of games they do. AAA games are no joke. The amount of complexity
in those games is incredibly high. Until then, I never thought about it: 300 people working for about 5 years ON A SINGLE PRODUCT, where
all parts are interconnected (models, animations, sound, programming, effects, etc…). They definitely liked my attitude, but there
was no way I could add immediate value to the company.&lt;/p&gt;

&lt;p&gt;After a sad goodbye and an invitation from their side to try again in a couple of years, I went back home and started reconsidering my plan.&lt;/p&gt;

&lt;p&gt;What I had learned was that, in general, my kind of expertise and what I was trying to sell was quite specific. Only studios using
their own engines or technologies would look for somebody with that expertise. But it is too risky to hire somebody without
previous videogame experience, so it seemed like I had hit a roadblock. What to do?&lt;/p&gt;

&lt;p&gt;After almost 1 month considering my options, the idea of learning Unity popped into my mind. That way I could access a wider range
of companies, but I was afraid that learning Unity could dilute my C++ expertise, and that I would be competing against a myriad of
other developers and designers. However it seemed really appealing to to me the idea of developing a full videogame. Compared to
doing everything from scratch, using Unity (or Unreal) could allow me to learn another level of videogame programming, and not focus
on the little nitty-gritty details only.&lt;/p&gt;

&lt;p&gt;So I decided to do it. Fortunately at the same time, a very good friend of mine that had never done anything with videogames,
discovered a passion for pixel art and started to groom the idea of developing a rogue-like game. We discussed about it,
and the idea started to shape in our minds. At that moment I decided that having a project was the best way to learn what is
needed to develop a game with Unity. Otherwise it can turn into a theoretical exercise on how to develop a game that can
let you stranded.&lt;/p&gt;

&lt;p&gt;We started in January 2017 and had been advancing at quite a good pace, until the event happened!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The event? The end of the world? The new House of Cards season was released?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, my friend. During this time I had sent a lot of CVs to different companies around Amsterdam, and also had some interviews, all of
them with the same result: they didn’t hire me because I had no experience in videogames. But I kept trying while steering my plan into
learning Unity. Finally in February another contact I had from GDC Europe/Respawn wrote me to tell me that his company was hiring. Urgently. Urgently meaning more chances for me to perhaps enter without previous videogame experience.&lt;/p&gt;

&lt;p&gt;If I succeeded it would mean to leave the city I love and all my dear friends that live here, in Amsterdam. But it would also mean
that I could fulfill my life-long dream of becoming a game developer! Choices, choices…&lt;/p&gt;

&lt;p&gt;Finally I decided to apply. After quite a tough selection process including an offline test and a live-test with 2 technical leads,
they came back to me with the good news: they wanted me there!! I couldn’t believe it!! I think I haven’t been this happy in a long
time. You know, tears and stuff! I made it! I think the 10 years old kid living inside of me is the happiest kid in the world right now!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Literally?? Do you really have…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, no. That would be weird. Really weird! Where did you say you were from, Timmy??&lt;/p&gt;

&lt;p&gt;Never mind. The thing is that I’m moving to Barcelona this month to start working in one of the most amazing companies I’ve known of:
Social Point. From everything I know about them, I think it is going to be one hell of a life experience. Personally, I’m closing a
chapter of my life and opening a new one. I’m excited, happy, sad, fearful, full of energy, positive and a lot of other emotions that run through my mind.&lt;/p&gt;

&lt;p&gt;It is good when life taps you on the back.&lt;/p&gt;

&lt;p&gt;Very good.&lt;/p&gt;

&lt;h1 id=&quot;summary-of-good-practices&quot;&gt;Summary of good practices&lt;/h1&gt;

&lt;p&gt;So what steps should you follow to become a game developer? Honestly, I have no clue. I can see that each case is different, and
your previous expertise, how you are, what you want and many other factors will definitely condition the way you need to
approach this journey. However I will try to give you some generic advise here.&lt;/p&gt;

&lt;h2 id=&quot;go-social&quot;&gt;Go social&lt;/h2&gt;

&lt;p&gt;For me the first and most important thing before, during and after becoming a game developer is: socialize. Make friends, meet people,
go places. Get out of your comfort zone and try to experience new things. Experiences are invaluable. Even the bad ones. Be curious
about other people work, lives and opinions. Go to conferences. Go to conferences. Yeah, go to conferences. Not only the big techie
ones like GDC. Also the alternative ones. The ones that open your mind and fuck your brain…in a good way.&lt;/p&gt;

&lt;p&gt;By the way, one last tip to go social. If you go to conferences, go alone. Or if you go with somebody else, split and go different
ways for a while. We, humans, are not made to spend more energy than we need, and having an accomplice at a conference may limit
your openness.&lt;/p&gt;

&lt;p&gt;Also going social means to keep your friends close. They are the ones that will keep you sane when things go bad, and the ones that
will encourage you to keep trying.&lt;/p&gt;

&lt;h1 id=&quot;learn-learn-learn&quot;&gt;Learn, learn, learn&lt;/h1&gt;

&lt;p&gt;Never stop learning. Even if it seems it is not very useful at the moment. Don’t get me wrong, you need to reassess what you are
doing to understand if it is aligned with your goal. But don’t get too overwhelmed with the thousands of things you need to learn
to make it into the game industry. Pick one. The one that you like most and seems more in line with the kind of work you want to do. And
learn about it. Then pick the next. There is no other way. You could be surprised sometimes how skills you deemed useless may come
in handy during an interview or test.&lt;/p&gt;

&lt;p&gt;For example during one of my previous interviews there was a test with 2 exercises: writing a shader to draw some kind of procedural
character and emulating an ARM instruction in C. Because I had been working on my engine with OpenGL and shaders I was able to
tackle the first one. Because I took some interest in emulators some years ago I could tackle the second. I never thought my
emulation interest could come in handy!&lt;/p&gt;

&lt;p&gt;I have many other interests, completely unrelated. Who knows when they will come in line to help me.&lt;/p&gt;

&lt;h1 id=&quot;work-hard&quot;&gt;Work hard&lt;/h1&gt;

&lt;p&gt;This last 2 years have been all about working a bit everyday. Some days I was working on my engine from 19:00 to 00:00, some
other days from 21:00 to 23:00, some days I just went with my friends to have a drink. I never lost sight of my goal, or the fact
that I had to work on it, but I was also really conscious that I’m a human being and I need some space and rest, and people, and fun.
Never forget that the main purpose of your life is to be happy. You decide how to achieve that, but never lose sight of that very
true purpose: happiness.&lt;/p&gt;

&lt;p&gt;Then try to balance your life so you can work hard on the goals that make you happy, and try to spend less energy on the things
that are not important. Then never forget that YOU are important. Your friends and family are important. Relationships and love
are important. And health. Sway things to the side you need, but never replace completely one thing for another.&lt;/p&gt;

&lt;h1 id=&quot;capitalize-in-your-expertise-and-skills&quot;&gt;Capitalize in your expertise and skills&lt;/h1&gt;

&lt;p&gt;Try to realize what your strong points are. We all have things we are good at, and things we are not so good at. Try to understand
what those things are and try to build upon them. If you are not a good developer but you like music, perhaps you can be a videogame
musician, or if you like story telling, perhaps you can write videogame scripts. If you like the technical side try to understand which
of your traits will work better in that environment.&lt;/p&gt;

&lt;h1 id=&quot;be-ready-for-a-negative&quot;&gt;Be ready for a negative&lt;/h1&gt;

&lt;p&gt;One more important thing you need to learn: you may not make it. Ever. I had this emblazoned in my mind. Because it was true. There
is no law in the universe that says that if you try hard enough you will make it. It may never happen. You may have the right to try&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;,
but there is no way to know if you will eventually make it. I had given myself a ballpark timeframe to stop trying. Around 4 years to
understand if I could really make it or not. If things were not going well I would quit and dedicate my efforts to other things.&lt;/p&gt;

&lt;p&gt;Remember it is not about failure. It is about not wasting your energy. If after 4 years, for example, things were still not looking
clear to me, perhaps there was no point on keep trying. This is very subjective, but the main point is that trying forever, unless
it makes you happy, may mean that you are not ready to give up. Sometimes giving up is a good thing. It frees your mind to do other
things that make you happy, which is the main purpose of your life.&lt;/p&gt;

&lt;h1 id=&quot;summarizing-the-summary&quot;&gt;Summarizing the summary&lt;/h1&gt;

&lt;p&gt;Things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Life is about happiness&lt;/li&gt;
  &lt;li&gt;Happiness is not a goal, is a temporary state&lt;/li&gt;
  &lt;li&gt;Find what makes you happy and steer your life towards that&lt;/li&gt;
  &lt;li&gt;Manage your energy appropriately and never forget about the important things: yourself, friends, family, having fun, resting, living…&lt;/li&gt;
  &lt;li&gt;Try to achieve your goal. If you keep trying and it does not happen, choose something else: the world is full of amazing things to do&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second item is very important. Happiness is not something you unlock one day and then stays forever: it comes and go. You need to
work hard to keep happiness close to you, and it is not always possible. Something that makes you happy today may not make you
happy in 20 years time, or even 1 month time for that matter. You need to reconsider and analyze if you want to keep that in your life,
or it is costing you too much energy. It is a constant process.&lt;/p&gt;

&lt;p&gt;But it can be one hell of a ride!&lt;/p&gt;

&lt;h1 id=&quot;lightening-the-mood&quot;&gt;Lightening the mood!&lt;/h1&gt;

&lt;p&gt;Oh, wow! Ok, that was heavy speech back there! I realize that these are more like life-managing tips, rather than how to become
a game developer tips, but I think they are really inter-related. I’ve seen many people trying to get there in the videogame
industry, and losing themselves in the process. You cannot dedicate all your time and effort to only one thing, because if
that thing fails it can let you completely stranded.&lt;/p&gt;

&lt;p&gt;In any case take all this things with a grain of salt. I’m no guru. I’m just sharing what my experience has been while trying
to get into the game industry, and I think it may be useful to somebody out there!&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;“What” what? &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Do NOT trust me, I may disappear again like the subtle breeze of summer days that flirts with your naked neck and then flees away &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Yeah, well, who remembers the father after what his gifted kid has given to the world! &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Pictionary &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Teenage Mutant Ninja Turtles….a classic! &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Binary Spatial Partitioning Trees…a classic! &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Sadly not everybody in the world has this privilege &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/improbability-engine/&quot;&gt;Mastering the improbability engine&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on April 13, 2017.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Golden titanium alchemy - Optimization (2/2)]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/golden-titanium-part2/" />
  <id>http://www.robertocano.es/en/golden-titanium-part2</id>
  <published>2016-09-12T00:00:00+02:00</published>
  <updated>2016-09-12T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;de-introduction&quot;&gt;De-introduction&lt;/h1&gt;

&lt;p&gt;This is a follow up on &lt;a href=&quot;http://www.robertocano.es/en/golden-titanium-part1/&quot;&gt;this previous article&lt;/a&gt;. Go there if you haven’t yet.&lt;/p&gt;

&lt;h1 id=&quot;of-when-i-squeezed-the-jiffies-out-of-my-code&quot;&gt;Of when I squeezed the jiffies out of my code…&lt;/h1&gt;

&lt;p&gt;This part was the most interesting so far for me, as I had to optimize both the algorithm
itself and also the code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does that mean, dear Lord of the Pings?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you design an algorithm there are usually two parts: the algorithm itself and its implementation.
Typically the algorithm is measured using the big-O notation mentioned above, which binds the algorithm
to a certain order of execution, but not to a real time of execution. That can be only measured when
the code is written in certain language, compiled with certain compiler using specific optimizations
and run in a specific computer, with a particular CPU&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.Nowadays we could say that using a good compiler
and a modern CPU should yield similar results, but specifics like CPU speed, cache levels and sizes, instruction
set, etc… can have an impact on the final measured time. For example things like locality of the algorithm
can speed up things by making a good use of the cache.&lt;/p&gt;

&lt;p&gt;We won’t go as far as to analyze cache usage, but I definitely had to optimize both the algorithm to
gather information that could reduce the number of iteration in successive passes, and the code to
make a more efficient use of function calls and memory accesses.&lt;/p&gt;

&lt;p&gt;Here we go, you ready?&lt;/p&gt;

&lt;h2 id=&quot;algorithm-optimization&quot;&gt;Algorithm optimization&lt;/h2&gt;

&lt;p&gt;So this was the thing with my algorithm. On first pass I was analyzing the input string to find the
matched blocks. While doing so I was marking the matched parenthesis with a ‘X’, remember? Then on the
second pass I was basically adding up those ‘X’ together to count the number of consecutive matched
parenthesis in a block. What if instead I saved directly the amount of matched parenthesis in a block?
Then on second pass I’d have less iterations and less additions. That should improve things a little!&lt;/p&gt;

&lt;p&gt;To do so I’d need an extra array to store the new values. At this point I was deeming negligible memory
writes and reads compared to the number of iterations. It seems I was right in this particular case,
and I guess in average, although I didn’t have time to perform a deep analysis on this.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;markedMatched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* We only increase the streak when a close parenthesis is
           found in the input string, and only if it matches an opening
           parenthesis in the top of the stack */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* If we had an ongoing streak, take it into account now */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have something slightly better than ‘X’ in the output stack. However it is still not too
much optimized. The problem here is that if we have a lot of consecutive ‘()’ then we will end
up with a lot of consecutive ‘-2’ on the stack. We can do better.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By the way, why -2?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, that is called variable substitution. Because we are already using positive integers for
symbols like ‘(‘ and ‘)’, we need a different range to represent actual streaks of matched
parenthesis, and negative numbers are just perfect, as we can add them normally and we will need
just a final negation to make the result positive.&lt;/p&gt;

&lt;p&gt;To try to consolidate all those long sequences of ‘-2’ and similar subgroups of matched parenthesis
we just have to realize that once we finish a subgroup, there can be only a previous subgroup that
we can add up to make a supergroup, just because of the way groups of matching parenthesis are
defined. So we just need to check once we match a group, if there was a previous group streak saved
in the stack, if so add it to the current streak and remove it from the stack:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;markedMatched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* We only increase the streak when a close parenthesis is
           found in the input string, and only if it matches an opening
           parenthesis in the top of the stack */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* We found a subgroup, just check if the stack has a
               streak value for us that we need to add to the current
               streak value. If that is the case, get it out of the stack
               and add it to the current streak */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this function will leave the ‘st’ stack with a set of unmatched parenthesis interleaved with
some negative numbers which absolute value will tell us the size of the matched parenthesis in
between. Now that we have that, we just need to move the stack to a vector and then use it to
apply the sliding window, taking into account the new information. First move the stack into
a vector:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackToVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then finally apply the sliding window algorithm on this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findLongestStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxFlips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Per problem requirements, return -1 if no possible solution found */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxFlips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Matched block */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Found an unmatched parenthesis but
               we are out of edits, end the loop */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Same parenthesis symbol twice means we only
               need one edit to transform it into a matched
               parenthesis:

               )) -&amp;gt; ()
               (( -&amp;gt; ()

               Remember it does not matter if the parenthesis
               is consecutive or there is a matched block in
               between
            */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Special case, will only happen once in the whole
               loop, when the unmatched parenthesis change from ')'
               to '('. In this case we need 2 edits to match them,
               so we can only do it if we have 2 edits left */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Rest of cases, no edit needed */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And TA-DA! Code super optimized! Right? RIGHT?&lt;/p&gt;

&lt;p&gt;The thing is: no. I mean it is more optimized, for sure, but still not passing from
Codility Silver award. What else could we do to improve this? Well, as I mentioned
previously, we’ve optimized the algorithm. Now we can optimize the code itself.&lt;/p&gt;

&lt;p&gt;In order to do that I had to analyze the timing of the different part of the algorithm.
You can do that using your favourite profiles or instrumenting the code yourself. By doing
so I learned 2 things: which function of the 2 we have is impacting the performance more&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;,
and which specifics bits of code are bringing down performance.&lt;/p&gt;

&lt;h1 id=&quot;and-i-was-trying-to-use-c&quot;&gt;And I was trying to use C++…&lt;/h1&gt;

&lt;p&gt;Indeed I wanted to use C++ for the solution just to demonstrate my versatility in such
indomitable language. However after a bit of profiling I realized that using a custom
implemented stack, which actually can double as a vector without any overhead, improves
the performance. Implementing a stack manually is quite easy: we just need an array and
an index into the array. Even better: we can have an array and a pointer into the array.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Is it not the same?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, by using a pointer into the array we don’t need to increment the index and then
index the array pointer to obtain the value. The pointer into the array will point
all the time into the right position. We just need to check the boundaries properly so we
don’t point beyond the array limits.&lt;/p&gt;

&lt;p&gt;Oh, I almost forgot: this optimization is easy because we know the upper bound for the stack size.
Otherwise we’d need to manage reallocations of the memory, incurring in memory copies, etc. But
we are lucky and we know exactly the maximum size of the stack, which is exactly the size of the
input string.&lt;/p&gt;

&lt;p&gt;Also, and just in case you are a picky programmer that checks every dot and comma in the code,
the stack implementation I will use has one extra element to the left of the first element.
This is just because in the algorithm we are looking at position ‘i-1’ for the iteration ‘i’,
so by having that extra element we don’t need to have an extra flag that will be checked at
every iteration to know if ‘i==0’, saving us some precious cycles&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Now I will show the final algorithm, the one that won the award (almost). You’ll excuse me if
the step from the previous shown code to this one is too steep, but otherwise the article would
take ages!&lt;/p&gt;

&lt;p&gt;Let’s do it!&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Some defines for an easier to read implementation */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LEFT_PAREN  '('
#define RIGHT_PAREN ')'
#define MATCH_PAREN  '.'
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Stack buffer for the stack data. We will point to this
       buffer with the 'st' stack pointer. Please notice
       we allocate one extra byte to use it as a default
       initial value for the algorithm, then we initialize that
       extra value to 0 which is useful for the algorithm (see below)  */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 'st' is the pointer into the stack, instead of an index.
       This way we avoid indexing the stack pointer to get the value */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* The real start of the stack is 'st + 1' as the first value is
       just bogus. We will use 'st_base' to determine if the stack
       is empty */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Similar optimization for the string. Not sure it improves performance
      but just for fun */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Streak counter, similar to the previous algorithm */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* The next for loop should be familiar, it is the one used in the
       'markedMatched' function, except the loop variable and limits are
       using our new pointer based strings and stacks, and the if condition
       inside the for is reversed */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Quick comment, at the beginning of the algorithm 'st' points to the
           extra value in the stack, which is initialized to 0. This way the
           if condition will be true for the first iteration, which is OK because
           we cannot have matching parenthesis with only one parenthesis */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RIGHT_PAREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT_PAREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;*++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Tricky bits: increment first, then dereference */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Tricky bits: dereference first, then decrement */&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Same as before: if there was an ongoing streak, take it into account */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* The below code belongs to 'findLongestStreak' function, but using the
       new stack implementation. It also has some tricky bits */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* This is the final size of the stack, not the allocated one. We are
       counting the number of elements that are pushed in the stack, then
       calculating the end pointer for the loop */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Just to make things clear, we use stbuf directly here
           to avoid grabbing the address for 'i+1' below if it is
           not needed. This is basically checking the 'i-1' position,
           because 'st' actually starts at stbuf[1]. If the previous
           position is a matched parenthesis we can skip as the previous
           sliding window should have already taken it into account. This
           is true since finding a valid matched parenthesis sequence at 'i'
           when there is another matched parenthesis sequence at 'i-1' should
           concatenate both values, as we are looking for the longest streak */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Initialize 'st' to start applying the sliding window */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Same loop as in the original function but using our new stack implementation */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Position contains a matched parenthesis count (in negative),
               make it positive and add it to the current length */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Ops, we found an unmatched parenthesis but we are out of edits, so
               break the loop and analyse the result */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* Lucky us! We still have edits left. In this case we found
               the same bracket twice, either '((' or '))' so we only need
               1 edit to fix it */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;cm&quot;&gt;/* By editing one parenthesis we have
                                              2 more matched parenthesis */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MATCH_PAREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* And remember we've matched it, so
                                              we don't try to match it again */&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RIGHT_PAREN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT_PAREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* In this case we found two different unmatched parenthesis,
                   so ')(', we need 2 edits to match them, if we don't have that
                   many we are done with this window */&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* Otherwise same case as in the 'if' part,
                   except we subtract 2 edits */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MATCH_PAREN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* For the case when we don't have a previous parenthesis,
                   so only the first time we find an unmatched parenthesis
                   in a sliding window */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevBracket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* Analyse the length and see if it is a maximum */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/* If we've reached the last position no point
           on continuing processing */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well! Now it is! Yeah! Hooray!!! We’ve optimized the brains out of that glitch!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For real??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ha! Nop….&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nop??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NOP&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;According to Codility, we still get a Silver award. Whaaaaat!?&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;about-pragmatism&quot;&gt;About pragmatism&lt;/h1&gt;

&lt;p&gt;And here we are, my dear readers. Such a long way and still we are not home. We aimed to be gods and reality has
crushed our very dreams of fame and wonder. Long ago forgotten is our pride and the upcoming scent of roses…..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cut the shit, man!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, sorry. Just got lost in my own verbiage. My apologies.&lt;/p&gt;

&lt;p&gt;You know what? It was really NOT enough. So I had to use the power of the O! More specifically the &lt;em&gt;-O3&lt;/em&gt; option that
comes with the GCC compiler. This is the thing. In Codility, when you choose a language for the challenge, you can
see at the bottom the compiler used to compile your code. In my case for C/C++ it is GCC 4.8.3 if I recall correctly.
So I figured I could use some compiler specifics. The question was, of course, how to pass this flag to the compiler
when I actually didn’t have access to the Makefile or compiling script.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pragmatism!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed! Did you know there is a &lt;em&gt;#pragma&lt;/em&gt; directive that allows you to request certain level of optimization in GCC?
Me neither. Here it follows the life saving line:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#pragma GCC optimize (&quot;O3&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we got the Gold, baby!&lt;/p&gt;

&lt;p&gt;Hope you’ve enjoyed the article. I must confess it’s taken more time for me to write the article than to write the
code! But I found the experience a nice learning one, and I thought I should share it.&lt;/p&gt;

&lt;p&gt;You can always browse through my Codility repo for the Titanium challenge &lt;a href=&quot;http://github.com/robercano/codility/tree/master/titanium&quot;&gt;here&lt;/a&gt;. There are several snapshots
that may reflect what I’ve explained here. You can also browse any of my other projects.&lt;/p&gt;

&lt;p&gt;Keep up the good work!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Cosmic rays can also influence your results! Beware! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Quick answer: the first function, although for certain cases with longer number of swaps, the second is also taking some time. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Sorry, no Gollum joke here! &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;NO Pun intended…. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Whaaaaat!? &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/golden-titanium-part2/&quot;&gt;Golden titanium alchemy - Optimization (2/2)&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on September 12, 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Golden titanium alchemy - Algorithm (1/2)]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/golden-titanium-part1/" />
  <id>http://www.robertocano.es/en/golden-titanium-part1</id>
  <published>2016-09-08T00:00:00+02:00</published>
  <updated>2016-09-08T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;losing-my-virginity&quot;&gt;Losing my virginity&lt;/h1&gt;

&lt;p&gt;Yeah, you are in the right blog, don’t worry. I just happen to have a rather quirky sense
of humor. I’m gonna tell you the story of how I lost my virginity and won a golden award.
Oh yeah!&lt;/p&gt;

&lt;p&gt;Recently I was sailing the internet stopping at islands of unspeakable names, when I ran
aground on the most peculiar island I had ever seen on my numerous sea adventures: &lt;a href=&quot;http://www.codility.com&quot;&gt;Codility&lt;/a&gt;.
A seemingly paradisiacal oasis for programmers that challenged my senses and my understanding
of fun and logic.&lt;/p&gt;

&lt;p&gt;While romping at this site like a burglar in an abandoned gold mine, I saw it:&lt;/p&gt;

&lt;p style=&quot;font-size: 200%;&quot;&gt;&lt;strong&gt;~~THE CHALLENGE~~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, the upper case letters were not there, buts its Unicode lower case counterparts were. A new challenge
had started just few hours before, and it went by the name of Titanium&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There were other tests, yes, but they belonged to the past, their petty trials paled in comparison
with this new behemoth that questioned the very nature of the human mind&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;And I was the chosen one, erected to tackle the Titanium Challenge!&lt;/p&gt;

&lt;h1 id=&quot;baby-steps&quot;&gt;Baby steps&lt;/h1&gt;

&lt;p&gt;So what was all this fuzz about?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codility.com/programmers/task/brackets_rotation/&quot;&gt;THIS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically the aforementioned challenge consisted on writing a
program to solve a problem. The language of choice could be one of many options available,
including C and C++, which I’m proficient in.&lt;/p&gt;

&lt;p&gt;The problem? Parent matching.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parent matching?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, sorry, parenthesis matching. I was just trying to shorten the story&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. The problem consisted
on matching a sequence of parenthesis given as an input, along a maximum number of swaps that could be
performed on the input string. The swaps could be used to maximize the matchings. The implemented
function should return correctly the maximum number of matched parenthesis that the algorithm could
achieve by using the given number of swaps. It is important to note that the function should return
the maximum number of matched parenthesis, and not matched pairs (which in the end turns to be the
number of pairs multiplied by 2).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How could you tackle such an overly complicated task?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question! Rather easily. At least the first part, the parenthesis matching. It turns out that apart
from a correct output, the function must also comply with space and time complexity constraints (big-O
notation). Both were bound by O(N), meaning it should run on linear time&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and use an amount of
memory linearly proportional to the number of input parenthesis.&lt;/p&gt;

&lt;p&gt;So let’s tackle the first part first. But before, a big disclaimer from our sponsors:&lt;/p&gt;

&lt;hr /&gt;
&lt;p style=&quot;font-size: 120%;&quot;&gt;&lt;strong&gt;I have NOT, listen carefully, NOT tested the snippets of code provided here. The only snippet
that works is the last one of the part 2 of this article, which is the one presented
for Codility. The rest are coming from the top of my head, like little lice jumping out
of me. I tried to be as close to bug free as possible, but you may need to fix something
there. So no complaints!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;parenthesis-matching-or-how-much-did-i-miss-my-stack&quot;&gt;Parenthesis matching or how much did I miss my stack&lt;/h1&gt;

&lt;p&gt;How do you match parenthesis that must be nested? The answer is a stack. I hope you are familiar with
what a stack is, otherwise the rest of this article may melt your brain a bit. With a simple loop
and a stack from the C++ STL we can determine whether the input parenthesis are matched or not:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isMatched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;That is great!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, yes, but not too useful. From the zillion combinations we may receive as an input only
a few will be well formed nested parenthesis expressions, but this function may be useful for
something else. What if we mark which parenthesis have matches? For that we will need to remember
the position of the opening parenthesis, so we can mark that position also as matched, so we will
use 2 stacks, one for matching the parenthesis, and the other one to save the positions:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;markedMatched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the end of the function the string S will contain ‘X’ symbols in all positions with matched
parenthesis. So far so good! With this we can now actually count the number of ‘X’ in S and
we have a lower bound for the maximum number of matching parenthesis we can achieve&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h1 id=&quot;throw-it-all-out-the-window&quot;&gt;Throw it all out the window!&lt;/h1&gt;

&lt;p&gt;This is great, but we are still not fixing the string to maximize the number of matches. How
to do that? Well this paragraph will propose the culprit of the whole algorithm, so if you
want to try by yourself, stop reading NOW!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;NOW!! Flee, you fools!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But now, now?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh, jeez, yeah.&lt;/p&gt;

&lt;p style=&quot;font-size: 120%;&quot;&gt;&lt;strong&gt;SPOILER ALERT!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The answer is: sliding window!&lt;/p&gt;

&lt;p&gt;This is how this works: because the matching parenthesis
must form a valid parenthesis sequence, and a valid sequence is defined as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is empty&lt;/li&gt;
  &lt;li&gt;It has the form “(U)” where U is a valid bracket sequence&lt;/li&gt;
  &lt;li&gt;It has the form “VW” where V and W are valid bracket sequences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any valid sequence will have a consecutive number of matching parenthesis.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;?????&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at it this way: if you have a long parenthesis sequence and you introduce a single
unmatched parenthesis in the middle of the sequence you are splitting the sequence in 2.
Flipping any of the parenthesis in the original sequence to match the new parenthesis
will unmatch another parenthesis (because they come in pairs).&lt;/p&gt;

&lt;p&gt;Now we have blocks of matched parenthesis followed by one or more unmatched parenthesis.
Every 2 consecutive unmatched parenthesis can be matched by flipping one or two of them,
depending on the unmatched configuration:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;)) --&amp;gt; 1 flip  --&amp;gt; ()
(( --&amp;gt; 1 flip  --&amp;gt; ()
)( --&amp;gt; 2 flips --&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the first 2 cases a single flip will do, while for the third case you need 2 flips.
Any parenthesis right after or right before a matched block can be matched either with a
consecutive unmatched parenthesis or with a parenthesis at the other side of the matched
block. In the end the idea is to find a sequence of matched blocks divided by unmatched
blocks that we can fix with the limited number of flips we are given and get the longest
sequence of matched parenthesis.&lt;/p&gt;

&lt;p&gt;The only caveat with this problem is that it is not a local one. The main reason is that
local information surrounding a matched or unmatched block does not give us all the information
we need to know if the block should be part of the final solution or not.&lt;/p&gt;

&lt;p&gt;Due to this we need to analyse the whole string to understand which blocks are going to be
part of the longest streak of matched parenthesis. However one thing is true: the streak
must be consecutive, as this is one of the premises of the problem.&lt;/p&gt;

&lt;p&gt;Thus, the solution is a sliding window. We’ll start analysing from the first symbol in the
string and then see how many consecutive symbols we can get by flipping the unmatched blocks,
and we will save that number. Then we will start from the second symbols, and do the same
operation, saving the number. Then the third and so on, until we actually have the maximum
number of consecutive symbols achievable with the limited number of flips we have.&lt;/p&gt;

&lt;p&gt;Easy, right?&lt;/p&gt;

&lt;p&gt;Remember the next function gets called after ‘markedMatched’ and S will contain ‘X’ symbols
where matched parenthesis are found.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findLongestStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxFlips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Per problem requirements, return -1 if no
                           possible solution is found */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxFlips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Matched block */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Found an unmatched parenthesis but
               we are out of edits, end the loop */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Same parenthesis symbol twice means we only
               need one edit to transform it into a matched
               parenthesis:

               )) -&amp;gt; ()
               (( -&amp;gt; ()

               Remember it does not matter if the parenthesis
               is consecutive or there is a matched block in
               between
            */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Special case, will only happen once in the whole
               loop, when the unmatched parenthesis change from ')'
               to '('. In this case we need 2 edits to match them,
               so we can only do it if we have 2 edits left */&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;edits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* Rest of cases, no edit needed */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;prevSymbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;streak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxStreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And &lt;em&gt;et voilà&lt;/em&gt;, that will return the correct solution! Easy-peasy! Peanuts!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wow!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah! Wow! So you were wondering, did this awarded me my golden Codility award….no way!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, problem were cycles! Not like the cycles problem found in graph algorithms. But rather
CPU cycles. My program was too slow for Codility to award me a golden thingy. Dear reader,
come with me for the final journey into the realm of the pure fast. Let’s optimize this shit
together!&lt;/p&gt;

&lt;p&gt;For that you’ll need to read the continuation in a follow-up article!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cliffhanger!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Cliffhanger!&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Is it only me or the this 2 syllables ‘tit’ and ‘anium’ sound rather funny? &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Yeah, well, actually there are other challenges in Codility that are REALLY crazy, but I have to sell it, right? &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Yeah, sure! &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you are not familiar you can check one of many articles explaining it, like this one: http://web.mit.edu/16.070/www/lecture/big_o.pdf &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you get less than that number, you are doing something really wrong! &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/golden-titanium-part1/&quot;&gt;Golden titanium alchemy - Algorithm (1/2)&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on September 08, 2016.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[How to compile a cross-compiler]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/compiling-a-crosscompiler/" />
  <id>http://www.robertocano.es/en/compiling-a-crosscompiler</id>
  <published>2015-09-03T00:00:00+02:00</published>
  <updated>2015-09-03T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;why-on-earth-would-you-do-that&quot;&gt;Why on earth would you do that?&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;

&lt;p&gt;Good question! TLDR: I’m bored.&lt;/p&gt;

&lt;p&gt;Recently I was raking through the tons of data I’ve stored in my main backup drive and enjoying
the good ol’ times, when I stumbled upon one project I had parked away long time ago: the Dreamcast
emulator! I will talk in detail about this project in a future post. For now it suffices to say that
I’ve revived the project and I’m currently working on it in my spare time. As a first approach to the
emulator I decided that it would be a feasible and achievable sub-project to just write the main
processor emulator.&lt;/p&gt;

&lt;p&gt;To do so not only I need to write the emulating code itself but, most important, I need executables
to test the emulator with.&lt;/p&gt;

&lt;p&gt;Hence the necessity to have an SH cross-compiler to compile test code and test the emulator with it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But why don’t you just download the cross-compiler??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question! TLDR: I work on Mac, and couldn’t find any.&lt;/p&gt;

&lt;p&gt;Well, yeah, that’s it. No longer version of the answer&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-on-earth-do-you-do-that&quot;&gt;How on earth do you do that?&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;

&lt;p&gt;How do you compile a compiler? How do you compile a cross-compiler? How do you manage to get on your blog’s visitors nerves?
For the first two keep on reading. For the third….well, keep on reading…..&lt;/p&gt;

&lt;p&gt;A long long time and space ago in a galaxy far far away&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; there were machines that could execute binary code: we called them
computers. And the binary code was written manually by yet another kind of machine: the humans. To do so the humans used
a language called assembly, a collection of mnemonics and parameters that translated straight into binary. Life was good and simple,
except that humans spent humongous amounts of time writing this code, until they realized that they could use the computers to do the
work for them: the first compiler was born! &lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;These very first compilers were written using assembly. Later on in history the programmers realized that once
they had the first compiler for a certain language (let’s say C), they could rewrite the compiler using the same language
the compiler was aimed to compile from. This lead to self-hosted compilers!! There have been plenty of them and one of
the most famous ones is GCC, the GNU C compiler, which was written originally in C, and recently rewritten in C++.&lt;/p&gt;

&lt;p&gt;The GCC collection of compilers is the biggest and greatest ever thanks to its layered architecture. This allows
GCC to be compiled using GCC to generate any compiler for almost any known CPU architecture.&lt;/p&gt;

&lt;p&gt;And that is what the next section is about: how to compile GCC for the SH architecture.&lt;/p&gt;

&lt;h1 id=&quot;so-please-how-do-you-compile-the-gcc-cross-compiler-for-sh&quot;&gt;So, please, how do you compile the GCC cross-compiler for SH?&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;

&lt;p&gt;Well, here it goes. First of all, disclaimer: I’ve tried this method in both Mac OS X Yosemite 10.10.5 and Ubuntu 14.04LTS
and steps or instructions may vary for your own OS flavor.&lt;/p&gt;

&lt;h2 id=&quot;install-the-normal-version-of-gcc-for-your-machine&quot;&gt;Install the normal version of GCC for your machine&lt;/h2&gt;

&lt;p&gt;The first thing we need is the normal GCC compiler for C and C++. The recommendation is to get at least the same major and
minor version of the compiler we’ll be compiling. This means that if you want to compile the 4.8.2 version of GCC you must
install in your machine any of the 4.8.x versions of the normal compiler.&lt;/p&gt;

&lt;p&gt;In Ubuntu this is a piece of cake and you can do something similar to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gcc-4.8 g++-4.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Mac OS X the best option is to install Homebrew and install the compiler from there. For instructions on how
to install Homebrew see &lt;a href=&quot;http://brew.sh/&quot;&gt;here&lt;/a&gt;. Once installed execute the following commands in a terminal:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo brew tap homebrew/versions
sudo brew install gcc48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the gcc and g++ compiler into /usr/local/bin.&lt;/p&gt;

&lt;h2 id=&quot;prepare-the-filesystem-and-grab-the-required-sources&quot;&gt;Prepare the filesystem and grab the required sources&lt;/h2&gt;

&lt;p&gt;To compile GCC we will need to download 3 different source packages: &lt;em&gt;GCC&lt;/em&gt;, &lt;em&gt;binutils&lt;/em&gt; and &lt;em&gt;newlib&lt;/em&gt;. Instead of newlib you
can use glibc but this guide uses newlib. Also to grab the sources I use wget. If you don’t have wget you can install
it with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo brew install wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or simply copy paste the URL to a browser.&lt;/p&gt;

&lt;p&gt;First create the directory structure that will host the new compiled tools. The structure I use is not mandatory and
you can choose any of your own as far as you keep it consistent.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir -p /opt/cross/src/
sudo mkdir -p /opt/cross/gcc-sh/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adjust the permission of the newly created directories as needed so you can enter, write and read them. Now switch to the
&lt;em&gt;src&lt;/em&gt; directory and download the packages we need:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/
wget ftp://sourceware.org/pub/binutils/releases/binutils-2.24.tar.gz
wget http://www.netgull.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.gz
wget ftp://sourceware.org/pub/newlib/newlib-2.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Expand the packages:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar xzvf binutils-2.24.tar.gz
tar xzvf gcc-4.8.2.tar.gz
tar xzvf newlib-2.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the directories where the compilation scripts will be created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir binutils-build
mkdir gcc-build
mkdir newlib-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And last but not least download all required GCC pre-requisites:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/gcc-4.8.2/
./contrib/download_prerequisites
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;export-all-required-variables&quot;&gt;Export all required variables&lt;/h2&gt;

&lt;p&gt;You need to export some variables for the compilation of the packages to work. I’m assuming you are
working on Mac and the paths for CC, CXX, CPP and LD are the paths where Homebrew install the
compiler. In Ubuntu you don’t need to export those, only PREFIX and PATH:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export CC=/usr/local/bin/gcc-4.8
export CXX=/usr/local/bin/g++-4.8
export CPP=/usr/local/bin/cpp-4.8
export LD=/usr/local/bin/gcc-4.8
export PREFIX=/opt/cross/gcc-sh/
export PATH=$PATH:$PREFIX/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;generate-the-compilation-scripts-and-compile&quot;&gt;Generate the compilation scripts and compile!&lt;/h2&gt;

&lt;p&gt;We will use &lt;em&gt;make&lt;/em&gt; to compile the packages. A common option for make is -j which tells make how many parallel
processes to spawn in order to compile the code. Adjust that number to your machine’s number of processors.
If your machine has more than one virtual/physical processor I suggest to use the maximum number of processors
minus 1, so you can continue doing other things while the compilation proceeds. In the examples below I will
be using -j8 as the option to make. Please change that accordingly.&lt;/p&gt;

&lt;p&gt;To determine the number of processors in Ubuntu, check the proc filesystem:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /proc/cpuinfo | grep processor | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Mac you can use sysctl:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysctl -n hw.ncpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the three packages we’ve downloaded make use of the &lt;em&gt;configure&lt;/em&gt; tool to generate the compilation scripts
for the machine where the package will be compiled. To do this we switch to the corresponding build
directory and generate the scripts there:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/binutils-build
../binutils-2.24/configure --target=sh-elf --prefix=$PREFIX --disable-nls --disable-werror
make -j8 all install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next step is to compile a bootstrap version of GCC supporting only C language. A bootstrap version is a GCC with the
minimum functionality we need to compile other parts of the compiler or, like in our case, to compile newlib. We will
use this stripped-off version to cross-compile newlib and then compile a full GCC against it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/gcc-build
../gcc-4.8.2/configure --target=sh-elf --prefix=$PREFIX --with-newlib --without-headers --enable-languages=c --disable-nls --disable-libssp
make -j8 all install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is important to disable libssp for GCC as this library is quite big and will cause GCC compilation to break for SH
alleging some &lt;em&gt;size_t&lt;/em&gt; symbol being missed.&lt;/p&gt;

&lt;p&gt;OK, now we can proceed to cross-compile newlib with the bootstrapped compiler:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/newlib-build
../newlib-2.1.0/configure --target=sh-elf --prefix=$PREFIX --disable-nls --disable-libssp --disable-werror
make -j8 all install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally compile the full GCC with C and C++ support:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/cross/src/gcc-build &amp;amp;&amp;amp; rm -rf *
../gcc-4.8.2/configure --target=sh-elf --prefix=$PREFIX --with-newlib --without-headers --enable-languages=c,c++ --disable-nls --disable-libssp
make -j8 all install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voilà! We have a full GCC cross-compiler&lt;/p&gt;

&lt;h2 id=&quot;why-so-serious&quot;&gt;Why so serious?&lt;/h2&gt;

&lt;p&gt;Ops! It’s true, this tutorial has ended up being a real true professional and serious tutorial!! Hope you’ve enjoyed it anyway and
that it may be of help to you, legion of crazy cross-compiler compiling bashtards!! &lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Next time I will talk about the Dreamcast emulation, interpreters, dynarec and static binary translation. Can’t wait for it!! &lt;sup id=&quot;fnref:8&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Watch me digress across this section. For the real stuff, go to next section &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For a longer version of the answer, read it twice. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Watch me introduce you to a brief history of the compiler while I continue digressing. For the real real stuff, go to next section &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Yeah, well, our own galaxy was far far away long time ago, right? &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Strictly speaking the tool that translated assembly to machine code was called assembler, not compiler &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For real, Jo! &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;See what I did there! :D &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For real, Jo? &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/compiling-a-crosscompiler/&quot;&gt;How to compile a cross-compiler&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on September 03, 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Coursera music courses]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/coursera-music-courses/" />
  <id>http://www.robertocano.es/en/coursera-music-courses</id>
  <published>2015-05-01T00:00:00+02:00</published>
  <updated>2015-05-01T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;the-mother-of-all-courses&quot;&gt;The mother of all courses&lt;/h1&gt;

&lt;p&gt;A long long time ago, in a company far…from being far away, my manager,
a wonderful lady that cares a lot for her managee was showing me several
possibilities to get some nice trainings that could help in my professional
development. One of the places was &lt;a href=&quot;http://www.coursera.org&quot;&gt;Coursera&lt;/a&gt;, which offers a wide range
of free courses for programming, management, music, arts and what-not&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I checked out some courses then, but couldn’t find one that sparkled amidst
the humongous offerings of the site. Hence I simply forgot about it and went
on with my life.&lt;/p&gt;

&lt;p&gt;Until quite recently, when I was extremely bored and thought:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey! Why don’t I try to do a music course!&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;Roberto Cano&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And started googling&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; around to find a nice course. I was even willing to
pay for it!&lt;/p&gt;

&lt;p&gt;As usual, Google delivered, and I found a very nice online school called
&lt;a href=&quot;https://www.berklee.edu/&quot;&gt;Berklee&lt;/a&gt;. I would learn later on that this is one of the most important
music schools in the US, but by then, I had no clue of what was it. Just that
I mistook it by the Berkley university.&lt;/p&gt;

&lt;p&gt;So I checked out the prices and, to my surprise, the courses were quite expensive!
Don’t get me wrong, from what I’ve learned since then, the prices are really worth it. In the
end you are paying for the equivalent of a master in music, but that was not what I
had in mind.&lt;/p&gt;

&lt;p&gt;Nevertheless I kept digging and searching, and crawling the web, and couldn’t help but
try to search something similar to Berklee. So I started using search terms like
&lt;em&gt;similar to Berklee&lt;/em&gt;. And then &lt;em&gt;Coursera&lt;/em&gt; popped up. And bite me! They had some
Berklee courses!&lt;/p&gt;

&lt;p&gt;Berklee is currently offering the &lt;a href=&quot;https://www.coursera.org/specialization/modernmusician/5&quot;&gt;Modern Musician&lt;/a&gt; specialization through 3 different
courses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Developing your musicianship&lt;/strong&gt;: Introductory course about harmony, intervals and chord structure of a song&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Introduction to music production&lt;/strong&gt;: Introduction to a DAW&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, filters, equalization, recording, etc…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Songwriting&lt;/strong&gt;: To learn how lyrics are written to achieve different effects, prosody, stability and instability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can enroll in these courses completely for free, and you can actually do it at your own pace
if you are not interested in the peer review process, or doing the assignments. However to earn
the &lt;em&gt;Modern Musician&lt;/em&gt; certificate you must enroll in the &lt;em&gt;Signature Track&lt;/em&gt; offered by Coursera
that authenticates your submissions and gives you a completion certificate after each course. The
Signature Track costs 43$ each course. Once the 3 courses are finished you can enroll in the
&lt;em&gt;Modern Musician Capstone&lt;/em&gt; which is the final course to earn the Modern Musician certificate.&lt;/p&gt;

&lt;p&gt;I got to the &lt;em&gt;Music Production&lt;/em&gt; course a little bit late and I had missed some of the lessons and
assignments, so I decided to just follow the course at my own pace, without submitting my assignments
and just get a taste of the courses. I really liked it, and although I, having 18 years of
amateur experience in music, knew most of the concepts explained in the course, felt it was
worth it.&lt;/p&gt;

&lt;p&gt;Recently Berklee has opened a new round of courses, and now I’ve enrolled in the &lt;em&gt;Songwriting&lt;/em&gt; course,
meaning I’m kind of doing the courses in the wrong order, though it does not really matter, as I’m
not a complete beginner in music.&lt;/p&gt;

&lt;p&gt;If you are interested in music, I strongly recommend these courses. Maybe not the paid version, as these
are just introduction to the most important concepts in music writing and production, but definitely
worth doing.&lt;/p&gt;

&lt;p&gt;And if you are NOT into music&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, there are plenty of other courses, specially for programming, that
can help you power up your skills, or just give you lots of fun while learning. Check them out!! There
are lots and they are free!!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The what-not courses are simply amazing! Check them out! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Should I write googling with a capital G? Is it trademarked? &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Digital Audio Workstation &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;What are you doing reading my blog? &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/coursera-music-courses/&quot;&gt;Coursera music courses&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on May 01, 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[My own multilanguage Jekyll website (I)]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/multilanguage-jekyll-website_I/" />
  <id>http://www.robertocano.es/en/multilanguage-jekyll-website_I</id>
  <published>2015-04-17T00:00:00+02:00</published>
  <updated>2015-04-17T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;h1 id=&quot;a-very-long-introduction&quot;&gt;A very long introduction&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is an open source program, written in Ruby by Tom Preston-Werner,
GitHub’s co-founder. Jekyll is a simple, blog-aware, static site generator for
personal, project, or organization sites. Instead of using databases, Jekyll takes
the content, renders Markdown or Textile and Liquid templates, and produces a
complete, static website ready to be served by Apache HTTP Server, Nginx or another
web server. Jekyll is the engine behind GitHub Pages, a GitHub feature that allows
users to host websites based on their GitHub repositories.&lt;/p&gt;

  &lt;p&gt;– &lt;cite&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Jekyll_%28software%29&quot;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, that saved me a whole paragraph in this post! Couldn’t really find better words
to describe Jekyll. A really interesting and simple tool to build websites from mere
ASCII files.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey! Like HTML, PHP and Javascript!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, ok, you got me. Indeed, most of web technologies are based on &lt;em&gt;ASCII&lt;/em&gt; files, apart
from Databases for example. Anyway the beauty of Jekyll is that the ASCII files are
&lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; files that follow a minimal set of rules to format text. This rules are
such that the bare ASCII file, without the parsing, is still quite readable. It is
similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/Help:Wiki_markup&quot;&gt;Wiki Markup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll is great, easy to use, even a baby can set it up, it is fast, simple, and generates
custom static pages that can be trimmed down to a minimum if needed. Piece of cake!&lt;/p&gt;

&lt;p&gt;However, as always that something related to the web comes into my hands, I found a big
issue: design. I may not be a good designer&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but I know how a good design looks like.
Most importantly, I know how I like my website. Thus the first thing I did was to try
to find a suitable design for my minimalistic idea of a blog. Googling around I
stumbled upon a very neat and pretty Jekyll design called &lt;a href=&quot;https://mmistakes.github.io/so-simple-theme/&quot;&gt;So Simple&lt;/a&gt; from designer
&lt;a href=&quot;https://mademistakes.com/about/&quot;&gt;Michael Rose&lt;/a&gt;. I fell immediately in love with it and decided that it was going
to be the new Look&amp;amp;Feel for my site.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-your-first-jekyll-website&quot;&gt;Setting up your first Jekyll website&lt;/h1&gt;

&lt;p&gt;So let’s say you’ve found, like me, a neat, cool and usable theme for Jekyll&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and you
want to start using it. The first thing you need to do is install Jekyll itself. You can
do that by opening a shell and executing the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler  &lt;span class=&quot;c&quot;&gt;# This install the bundler utility that eases dependency solving for Ruby&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:mmistakes/so-simple-theme.git &lt;span class=&quot;c&quot;&gt;# For the So Simple theme using SSH&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;so-simple-theme
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# To install the Ruby dependencies specified in the Gemfile file. You may need sudo here.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve  &lt;span class=&quot;c&quot;&gt;# To serve the website at http://localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Done! You have your new website up and running in your machine! Go to &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;
and check it out. Neat, right!? Well, true, nobody can see your website right now, but you do. Play around
and check all the nice things that come with the theme you’ve selected. If you need to stop the server just go
to the shell and Ctrl-C it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What hellish jargon is all this &lt;strong&gt;shell&lt;/strong&gt;, &lt;strong&gt;sudo&lt;/strong&gt;, &lt;strong&gt;git&lt;/strong&gt;, &lt;strong&gt;website&lt;/strong&gt;, &lt;strong&gt;jargon&lt;/strong&gt;??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh, wait. I didn’t disclaim that. Let’s do it now:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;DISCLAIMER&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;This blog is mainly aimed to advanced users and/or/xor developers&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;with broad experience in Linux-ish systems that have been able to&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;solve the conundrums of the shell and have suffered early installations&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;of Linux distros in their flesh. I deny all liability related to a&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;misunderstanding and/or misuse of the instructions contained in this post.&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Besides: &lt;a href=&quot;http://www.google.com&quot;&gt;Google&lt;/a&gt;.&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I feel better now. Let’s continue. Now that we have a theme on our hands that we can serve
from our own machine, what next? Well, it will depend on your theme of choice, but typically
the first thing you want is to edit the _config.yml file. This file contains the Jekyll site
configuration. Things like the Blog’s name, server URL where the site will be hosted, type of
Markdown language and other goodies are found here.&lt;/p&gt;

&lt;p&gt;Then you typically have the _posts directory. This one contains the posts for your blog.
Inside this directory you may find some more directories: these are the categories of
your posts. And then inside the posts themselves. There are other interesting directories
at the root level:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_layouts - Containing HTML files with the layout of your different pages&lt;/li&gt;
  &lt;li&gt;_includes - Containing some more HTML files that are directly included in other HTML files (things like headers and footers)&lt;/li&gt;
  &lt;li&gt;_data - Containing some valuable YAML data that can be used in your site to customize stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this files, and templates, and layouts, and YAML data are mixed and shaken together and then
compiled into your final site.&lt;/p&gt;

&lt;p&gt;Check out the website you’ve downloaded, read the instructions and play around with it. You can always
build and serve the pages locally before you publish them.&lt;/p&gt;

&lt;p&gt;In follow-up posts I will explain how to add multi-language features to your site, how to publish it
in GitHub pages, how to add a custom domain and how to cook the best beef stew&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;!!&lt;/p&gt;

&lt;p&gt;Thanks for reading!!!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Hint: I’m not. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you intend to setup a Jekyll site from scratch please follow this &lt;a href=&quot;http://jekyllrb.com/docs/quickstart/&quot;&gt;tutorial&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Don’t expect everything I say to be true &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/multilanguage-jekyll-website_I/&quot;&gt;My own multilanguage Jekyll website (I)&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on April 17, 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[GitHub pages first contact]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/github-pages-first-contact/" />
  <id>http://www.robertocano.es/en/github-pages-first-contact</id>
  <published>2015-04-10T00:00:00+02:00</published>
  <updated>2015-04-10T00:00:00+02:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Blogs and blogging is basically what is all about lately in the web. I’ve found that even certain news
media try to convey a sense of proximity with the reader by using a more personal and blog-like approach.
Nowadays it is important to have an on-line presence in places like &lt;a href=&quot;http://www.twitter.com&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com&quot;&gt;YouTube&lt;/a&gt; or &lt;a href=&quot;http://www.linkedin.com&quot;&gt;Linkedin&lt;/a&gt;,
and if you are a developer it is equally important to be present in &lt;a href=&quot;http://www.github.com&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; for
example.&lt;/p&gt;

&lt;p&gt;The best way to complement this is of course to have your own personal blog where you may have a more intimate
space where to publish more concrete and developed ideas.&lt;/p&gt;

&lt;p&gt;I’ve always had my own blog or website where I’ve been dumping this and that (mainly that…) as a form of
self-expression and mainly as a way of tracking the things that I’ve been doing over time. Sometimes memory
is ephemeral.&lt;/p&gt;

&lt;p&gt;Without knowing about the existence of my personal blog a esteemed friend of mine was recently sharing
with me that he was starting a new blog &lt;a href=&quot;http://www.enriquerecarte.com&quot;&gt;Enrique Recarte Blog&lt;/a&gt;. He is an accomplished developer and architect
now tasting the goodies and baddies of London’s busy life. Our conversation was quite interesting and he introduced
me to the unknown-until-then GitHub pages service.&lt;/p&gt;

&lt;p&gt;I’ve been often paying for hosting services to host my website, and although it is usually not expensive,
it is always overpaid for the use I make of it. Besides it always brings a little bit of over-engineering as I
tend to use CMSs (Content Management Systems) like Joomla or more recently WordPress. Although these two
products are great and have a big and active community around it, it is like using sledgehammers to crack nuts.&lt;/p&gt;

&lt;p&gt;So I really welcomed it when my friend Enrique was explaining to me how to prepare a GitHub pages site using &lt;a href=&quot;http://www.jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;,
how it is automatically compiled when uploaded, and how to associate an already owned domain name to it through
the CNAME file. I should not go into much detail in this post as I’m preparing a more technical post about
Jekyll and all the steps I’ve followed to bring my site live, but it has been a really pleasant experience.&lt;/p&gt;

&lt;p&gt;There are two things I love about Jekyll and the GitHub pages approach. First, that the source pages follow the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;MarkDown&lt;/a&gt; format that will allow me to port my site to any future technology as it is just plain ASCII
with some extra headers for the FrontMatter engine. And second that the final website is just a static website
that will work on any webserver of the world. No need for PHP, databases or &lt;em&gt;fancy&lt;/em&gt; stuff. Yeah, ok, I know,
“how fancy a database is nowadays” you may say. However I prefer it this way. It is fast, easy to serve and I
can have a better control of the weight of the site.&lt;/p&gt;

&lt;p&gt;In a follow-up post I shall explain how to set up your own Jekyll website with multi-language and a search engine.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/github-pages-first-contact/&quot;&gt;GitHub pages first contact&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on April 10, 2015.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Lucky Lindy and the biggest hop of all]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/lucky-lindy-and-the-biggest-hop-of-all/" />
  <id>http://www.robertocano.es/en/lucky-lindy-and-the-biggest-hop-of-all</id>
  <published>2014-01-19T00:00:00+01:00</published>
  <updated>2014-01-19T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Hi, dear old friend. Long time no see (again). This time, as always, because my
daily duties took over my online presence and didn’t have time to update my
personal diary. It is, however, more than OK, as it has been one of the most
productive periods of the last years.&lt;/p&gt;

&lt;p&gt;Where should I start? Well, after I stopped writing, just after my Japan trip
(which was amazing!) I’ve been extremely busy…having fun! The summer in
Holland was unusually good, temperature around 22 degrees, almost no rain at all
and sun everywhere!&lt;/p&gt;

&lt;p&gt;I couldn’t resist to such weather and I was just jumping from party to party.
Spending all evenings (from Monday to Sunday) in places like the Roest,
Brouwerij Het Ij, Hanekes Boom, Vondelpark, Amsterdamse Bos. And by the end of
the summer 2 of the most amazing events of all summer: the Bloemendal 80s, 90s
and 2000s party and the Edelweiss festival. They were both magic and revealing.
I really enjoyed them. I love to dance, and I didn’t stop dancing. Mainly in the
Bloemendal one. And the DJ was incredibly good!&lt;/p&gt;

&lt;p&gt;All that party of course meant that I didn’t go to the gym for months! I think
I’ve lost every muscle I had build, but it was more than worth it. Now I should
come back…when I have time!&lt;/p&gt;

&lt;p&gt;After the summer the routine tried to break through and settle in my life again.
I could not help but look for new activities to keep my mind in that thrilling
state. So I started my guitar lessons. Guitar-singing lessons. I found a
professional guitarist and singer, Joep Berkenbosch, which does exactly what I
wanted to do: play guitar finger-style and sing at the same time, ala
songwriter. So I started and we connected immediately. He’s really good
guitarist and singer, but he’s also really good teacher, which sometimes does
not have to be true at the same time.&lt;/p&gt;

&lt;p&gt;I’ve been basically learning songs like Bob Marley’s Waiting in vain, Ben E.
King’s Stand by me or Beatles’s Here comes the sun. All of them beautiful songs,
with brand new chords I never played before and a special need for being able to
play the correct rhythm and sing at the same time. Now I’m just planing on going
wild….sorry live and play some songs in a public place, most likely with my
flatmate, who is an awesome singer!&lt;/p&gt;

&lt;p&gt;Then, while trying to get my obsession for the gym back I stamped on the most
exciting and awesome dancing lessons I’ve ever had: Lindyhop!&lt;/p&gt;

&lt;p&gt;Lindyhop is a dance for swing music from the 20s and 30s. It is fresh, funny,
relaxed and quite entertaining. The name of the dance comes (supposedly) from
Charles Lindbergh famous Atlantic hop with his plane, the “Lucky Lindy”. On the
newspaper the headlines read things like “Lindy hops the Atlantic” and from
there, as the dance was becoming popular, adopted the name Lindyhop. I believe
not only the dance is really engaging, but the particular lessons I’m taking
here in Amsterdam. The school is called Lindyspirit and the teachers, Quinten
and Sarah, are really good at getting you into the Lindyhop during the whole
lesson. I’m attending now to the second block, 8-count moves, and still love it
every time I go. I think it is the first time I go to a course and I forget
completely I’m trying to learn something, and just enjoy it!&lt;/p&gt;

&lt;p&gt;And last, but not least, as usual, this is starting to be a year with a lot of
plans and trips! Next stop, Japan again, specifically Kioto, during the Sakura
(Cherry Blossom) and with one of my best friends. The plan: playing some songs
to the locals in the bar of a friend of my friend, while enjoying the sushi and
the doriyakis! If everything goes well, this will be the first time I bring my
guitar on a trip. I’m quite excited!&lt;/p&gt;

&lt;p&gt;And on the long term, the low humming of the stick to the Thailand plan…&lt;/p&gt;

&lt;p&gt;Hope it does not take me that long to update this blog next time!&lt;/p&gt;

&lt;p&gt;(hint: also, in the meantime, I’ve started to learn calligraphy….why not!)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/lucky-lindy-and-the-biggest-hop-of-all/&quot;&gt;Lucky Lindy and the biggest hop of all&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on January 19, 2014.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Bootstrapping my friend]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/bootstrapping-my-friend/" />
  <id>http://www.robertocano.es/en/bootstrapping-my-friend</id>
  <published>2013-05-12T00:00:00+02:00</published>
  <updated>2013-05-12T00:00:00+02:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Het is lang geleden! It’s been a while since I don’t write here and the reason
is…vacation! I’ve been traveling around the world (almost literally as I’ve
been enjoying of Cambodia and Japan in less than a month) and I’ve
been successfully disconnected of my everyday routine. Now that I’m back I’m
really struggling to get back at work and my OpenGL learning, but as a
compensation I’ve been toying around with several ideas that I was curious
about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;On one hand I’ve been investigating about implementing Wireshark plugins
through its Lua interface to help analyze DVB Simulcrypt traffic captures,
which is quite useful in my job. This I did while helping in the integration of
our systems with one of our customers, and it proved to be extremely helpful.
The Lua interface for Wireshark is actually not really intuitive, and I needed
some examples developed by another colleagues to get a grasp on it, but I
finally I came up with a clean and easily extensible architecture that will
allow me to add more plugins in the future. If I have enough time I’ll post some
information on how this works to add my personal bit to the scarce information
that you can Google around about the topic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the other hand I’ve also had a grasp on FFMPEG filters as a consequence
of some POC needed for our research about video. In this case I basically
took the &lt;em&gt;drawtext&lt;/em&gt; filter and I stripped it out of all the unneeded code until
I had a minimum plugin that I could easily tweak to add, for example, noise to
the video. Actually there exists a plugin that achieves the same, but this was
just to have a placeholder in case I need to add some custom filters. In this
case it wasn’t that difficult as in the Wireshark’s plugins case, but still the
information I could find googling was not enough and outdated in some cases.
However I also found this quite interesting and useful for some quick proof of
concepts as you have all the decoding/encoding power of FFMPEG but you can
easily implement a &lt;em&gt;man in the middle&lt;/em&gt; attack!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the third hand…yes, whatever! I’ve also been having a look to Twitter’s
Bootstrap to use it as a web interface to control some of our systems. I
friend of mine who has been a web developer for Hyves (the Dutch Facebook)
recommended this to me as an accessible set of web widgets. Basically I didn’t
want to care too much about the look and feel. While learning it I found quite
interesting the fact that it is done merely with CSS and JavaScript, which
allows for an embedded system to have quite a lightweight web server as there is
no need for any server side support, like PHP. I immediately felt in love with
Bootstrap because of this but, as always, I had problems to set up the first
mockup of my project. Luckily I found a beta project called
&lt;a href=&quot;http://www.divshot.com/&quot;&gt;Divshot&lt;/a&gt; that offers an online WYSIWYG tool to compose
websites using Bootstrap. As opposed to &lt;a href=&quot;http://www.jetstrap.com/&quot;&gt;Jetstrap&lt;/a&gt;,
Divshot is still in beta stage and you don’t have to pay for it (although
Jetstrap allows you to create one website for free, I liked Divshot more). So I
created my stepping stone through Divshot, got the result and then customized
it manually to my needs. The result is actually pretty cool and I’m really happy
with it. Let’s Bootstrap!!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last thing I’ve learned on this road trip is about WebSockets. I was
completely convinced that WebSockets were just plain TCP sockets brought to the
browser, but they are actually quite different, and although based on TCP
sockets (of course!) they add an extra layer that you must comply with. So in
the end to implement a server that provides data to a web interface, you need to
actually implement a WebSocket server, which is something I don’t like.&lt;/p&gt;

&lt;p&gt;Anyway, it’s been a cool trip and now I continue designing my web interface and
trying to add some cool animations to it. Later on I’ll ask for the advise of my
Hyves friend as he’s an expert in usability and design, to let him criticize my
first web development attempt!&lt;/p&gt;

&lt;p&gt;Soon, I hope, more on my OpenGL development adventure!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/bootstrapping-my-friend/&quot;&gt;Bootstrapping my friend&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on May 12, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[OpenGL RedBook 7th edition and the price to pay]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/opengl-redbook-7th-edition-and-the-price-to-pay/" />
  <id>http://www.robertocano.es/en/opengl-redbook-7th-edition-and-the-price-to-pay</id>
  <published>2013-03-11T00:00:00+01:00</published>
  <updated>2013-03-11T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;In the last days I’ve formed my own opinion regarding the seventh edition of the
OpenGL standard, by the Khronos group. I’ve been reading the first chapters of
the book, consuming every word and trying to put in practice every example, to
get a grip on the not-so-new OpenGL 3.3.&lt;/p&gt;

&lt;p&gt;It turned out to be a disaster.&lt;/p&gt;

&lt;p&gt;I thought I lost my touch with technology, and that maybe I was too far away
from the topic that I couldn’t event get a basic understanding of the API.
However I did realize that 80% of the functions were deprecated (I remembered
this after a hundred pages reading…). Then I started wondering myself whether
the book was going to be able to teach me practical OpenGL. It proved
impossible.&lt;/p&gt;

&lt;p&gt;Digging into google pool of wisdom to know more about this problem I found two
things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everybody agree that the 7th edition of the OpenGL Red Book is good for
reference, but not for learning&lt;/li&gt;
  &lt;li&gt;Several of them pointed out this
&lt;a href=&quot;http://www.arcsynthesis.org/gltut/&quot;&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After this I learned 2 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To read more carefully all the reviews of a book before blindly buying it&lt;/li&gt;
  &lt;li&gt;That, sometimes, free books are plenty of times better than pay-per-read
ones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mentioned website is one of the best book/tutorial about something that I’ve
ever seen. Quite comprehensive, easy to follow, with up-to-date examples and an
easy reading, it is now my north star of the OpenGL books.&lt;/p&gt;

&lt;p&gt;If you are willing to learn modern OpenGL you must definitely try it. Then, when
the basic concepts sick, you can go through the OpenGL Bible (beware the 5th
edition as it is not as good the previous ones)  or the GLSL Cookbook than can
complement this basic knowledge with more advance techniques. But first is
first!&lt;/p&gt;

&lt;p&gt;Hope to have saved you some time!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/opengl-redbook-7th-edition-and-the-price-to-pay/&quot;&gt;OpenGL RedBook 7th edition and the price to pay&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on March 11, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Camera movement and premature optimization]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/camera-movement-and-premature-optimization/" />
  <id>http://www.robertocano.es/en/camera-movement-and-premature-optimization</id>
  <published>2013-03-11T00:00:00+01:00</published>
  <updated>2013-03-11T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;While writing the first bits and bytes of my ‘I-want-to-learn-OpenGL’ engine I
stamped myself against the camera implementation. As a first approach I was
trying to implement one of those fancy FPS walking cameras.&lt;/p&gt;

&lt;p&gt;I’m currently using the &lt;a href=&quot;http://glm.g-truc.net/&quot;&gt;GLM Library&lt;/a&gt;, which tries to
add back all the functionality present in previous versions of OpenGL and GLUT
to the new GLSL pipeline. Things like rotations, translation, perspective and
orthogonal projections are available in the library.&lt;/p&gt;

&lt;p&gt;When thinking about how to implement the camera movement, my first approach was
to use a look_at vector that would serve both as the direction of the camera (so
the view vector) and the direction of the movement when using the forward key.&lt;/p&gt;

&lt;p&gt;Also the control through the mouse would use the typical YAW, PITCH and ROLL
concepts.&lt;/p&gt;

&lt;p&gt;By this time I was presented to the Gimbal Lock concept that I will try to
tackle, both in code and blog, in the future.&lt;/p&gt;

&lt;p&gt;But then I ran into a problem. If I wanted the camera to move realistically,
every time the forward key was pressed I should move the camera in the direction
of the look_at vector. This meant updating the camera accordingly applying the
Yaw, Pitch, Roll rotation to the look_at vector before using that vector to
move forward. So I did so.&lt;/p&gt;

&lt;p&gt;The result: I lost almost a 30% of performance just by calculating the rotation
every time!!&lt;/p&gt;

&lt;p&gt;I was not surprised by the lost of performance, but I couldn’t believe
professional applications were spending a 30% of the time in calculating camera
rotations.&lt;/p&gt;

&lt;p&gt;Finally I decided to cheat a little bit on the user.&lt;/p&gt;

&lt;p&gt;As we are going to update the screen around 60 times per second, and the user
cannot see the intermediate movements (only the final one), I don’t update
the look_at vector until the time for the rendering is due. Then I apply the
rotation to the look_at vector and I apply the movement according to that
vector.&lt;/p&gt;

&lt;p&gt;This is not exactly accurate, but it works. To understand why it is not accurate
think about the following scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user faces the north&lt;/li&gt;
  &lt;li&gt;Then turns the camera 90 degrees left, to the west, and moves 10 units&lt;/li&gt;
  &lt;li&gt;Then quickly turns the camera 180 degrees to the right, facing east, and
moves 10 units&lt;/li&gt;
  &lt;li&gt;Finally turns 90 degrees left, facing north again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Net result: no movement at all when the frame is rendered.&lt;/p&gt;

&lt;p&gt;Result with my fake implementation: 20 units of movement towards the
north!&lt;/p&gt;

&lt;p&gt;However is hardly noticeable, and it saves a lot of time. Maybe when I can
use Quaternions it could become more realistic…who knows!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/camera-movement-and-premature-optimization/&quot;&gt;Camera movement and premature optimization&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on March 11, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[CSS, Blogger and Simple template transparency]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/css-blogger-and-simple-template-transparency/" />
  <id>http://www.robertocano.es/en/css-blogger-and-simple-template-transparency</id>
  <published>2013-02-25T00:00:00+01:00</published>
  <updated>2013-02-25T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;It may seem quite obvious for any HTML/CSS developer how to do this, 
but I struggled for 2 hours to find out how to set a semi-transparent 
background while using the Simple template of Blogger. Usually websites
indicate how to do it while using the Dynamic template. My main problem
was to know how the pane component was called internally. Finally I could
find the solution in this &lt;a href=&quot;http://www.bloggeries.com/forum/showthread.php?t=26163&quot;&gt;thread&lt;/a&gt;
from Bloggeries(http://www.bloggeries.com/).&lt;/p&gt;

&lt;p&gt;You must go to your Blogger configuration and click on &lt;strong&gt;Template&lt;/strong&gt;.
Then click on &lt;strong&gt;Customize. **This will bring the template customization page.
Click then in **Advance&lt;/strong&gt;, go to the bottom of the new categories pane and
click on &lt;strong&gt;Add CSS&lt;/strong&gt;. Here you can add the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Change the &lt;strong&gt;255&lt;/strong&gt; values to the RGB values you want for the background and
the &lt;strong&gt;0.7&lt;/strong&gt; to the alpha setting you prefer (from &lt;strong&gt;0.0&lt;/strong&gt; to &lt;strong&gt;1.0&lt;/strong&gt;). Click
on &lt;strong&gt;Apply to Blog&lt;/strong&gt; at the upper right corner and enjoy the benefits of alpha
blending in your blog!&lt;/p&gt;

&lt;p&gt;Remember this is valid for the &lt;strong&gt;Simple Template&lt;/strong&gt; of Blogger. I didn’t try
with other templates.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/css-blogger-and-simple-template-transparency/&quot;&gt;CSS, Blogger and Simple template transparency&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on February 25, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[PlayStation 4 and the future of videogames]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/playstation-4-and-the-future-of-videogames/" />
  <id>http://www.robertocano.es/en/playstation-4-and-the-future-of-videogames</id>
  <published>2013-02-24T00:00:00+01:00</published>
  <updated>2013-02-24T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;This week Sony presented the next generation of PlayStation videoconsoles.
While not unveiling the physical device as such, some specs are known.
It is an AMD based machine, bundled with one of the so famous ATI Radeon
graphic cards. An increase of memory, form 512MB to 8GB will easy the data
transaction of the new generation of entertainment devices, being this memory
of the GDDR5 type.&lt;/p&gt;

&lt;p&gt;Amazing?? No, not really. Nothing that a rather not-so-much bunch of bucks
cannot buy in the high-end PC market. However it is not the machine itself what
attracted my attention to the so expected Sony’s new videoconsole: it was the
technical demos and in-progress videogames I could see during the online
presentation. Not because these reflect what is coming with the PS4, but
because they reflect what is coming in the upcoming years for us, the gamers –
the hardcore gamers – and it is absolutely delicious.&lt;/p&gt;

&lt;p&gt;First, the tech demo from &lt;a href=&quot;http://www.quanticdream.com/&quot;&gt;Quantic Dream&lt;/a&gt;
showing off the level of quality for character acting. For the first time,
I was almost convinced about the humanity of the &lt;a href=&quot;http://www.youtube.com/watch?v=MUMOHSL53L8&quot;&gt;old man&lt;/a&gt;
appearing on the screen. It is not that we’ve reached the singularity already
– not yet – but we are quite closer now. Looking to the eyes of the character
you could almost feel his soul, and that’s quite of an experience. It could be,
of course, that all the horsepower of the PS4 was put to work to achieve only
that moving head, and that for real production videogames that’s not going to
be the true experience, but I was glad to see that we are getting there.&lt;/p&gt;

&lt;p&gt;Second, the tech demo from the Unreal team and its &lt;a href=&quot;http://www.unrealengine.com/&quot;&gt;Unreal Engine 4&lt;/a&gt;.
While still a little bit away form photorealism and with some minor issues I
could notice (like some unwanted aliasing in some geometry), the &lt;a href=&quot;http://www.youtube.com/watch?v=_o7EsSfOFAQ&quot;&gt;demo&lt;/a&gt;
has such a quality that it could perfectly be just a trailer for an upcoming
movie in theaters next month. It is quite impressive, as this is, in my opinion,
just the tip of the iceberg. I noticed plenty of particle management – ice,
fire, smoke… – and also several film techniques applied to the &lt;em&gt;filming&lt;/em&gt; of the scene.
It looks as if you had only to watch at the screen, as it really looks like a
movie, and not like a game.&lt;/p&gt;

&lt;p&gt;And last, but not least, games like &lt;a href=&quot;http://www.youtube.com/watch?v=IuRwp6aCWRw&quot;&gt;Kill Zone 4&lt;/a&gt;
with an incredible ala Blade Runner-like city, unbelievable reflections and curved surfaces
that made the city real and alive. Also master-pieces – if they are not, they will be –
like &lt;a href=&quot;http://www.youtube.com/watch?v=1WUSv5Ugm9c&quot;&gt;Watch Dogs&lt;/a&gt;, which shows that
not only awesome graphics are needed to grab the gamer’s attention, but a good
doses of freedom, simulation and AI realism. In this game the gameplay seems
unbounded, unlimited and never ending. It is not the most impressive piece of code
regarding the graphics area that I’ve seen, but it feels like
&lt;a href=&quot;http://www.youtube.com/watch?v=Kq5KWLqUewc&quot;&gt;Deus Ex: Human Revolution&lt;/a&gt; to the
power of ten in the gameplay area.&lt;/p&gt;

&lt;p&gt;Now what? It is obvious: to wait for the counterpart of Sony’s baby, the XBox 720 –
or whatever Microsoft wants to call it –. Sincerely I expect Microsoft’s proposal
to be even better than PS4. This way we, the gamers, will win a handful of
ever-lasting experiences in our minds and our hearts.&lt;/p&gt;

&lt;p&gt;Keep on playing!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/playstation-4-and-the-future-of-videogames/&quot;&gt;PlayStation 4 and the future of videogames&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on February 24, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[OSX and OpenGL 3.2]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/osx-and-opengl-3-2/" />
  <id>http://www.robertocano.es/en/osx-and-opengl-3-2</id>
  <published>2013-02-24T00:00:00+01:00</published>
  <updated>2013-02-24T00:00:00+01:00</updated>
  <author>
    <name>Roberto Cano</name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Recently I’ve bought the famous Red Book for OpenGL. This is the 7th
edition (so OpenGL 3.3). I bought this one because OSX Mountain Lion only
supports OpenGL 3.2 (by now) and I didn’t want to experiment the
frustration of trying to setup an example that finally I couldn’t run.&lt;/p&gt;

&lt;p&gt;Anyway the experience is starting to be quite a nightmare. It turns out that
the resources available on the internet to setup an OpenGL 3.2 example under
OSX Lion using C++ are scarce. Most of them focus on bringing OpenGL 3.2
rendering context using Cocoa and ObjectiveC. While good enough for a bit of
testing, it is not what I wanted to start playing around with OpenGL. I needed
either C or C++, and even though I saw some examples of how to setup an
ObjectiveC/C++ binding, I didn’t want to spend time on it.&lt;/p&gt;

&lt;p&gt;Finally it turned out that the solution was named &lt;a href=&quot;http://www.glfw.org/&quot;&gt;GLFW&lt;/a&gt;
GLFW is the replacement
of GLUT (the GL Utility Toolkit) that was famous a long time ago. Now GLUT is
still available but it looks like it doesn’t support window hints for
OpenGL context creation, which is what is needed to create OpenGL 3.2 contexts.&lt;/p&gt;

&lt;p&gt;I found really nice examples at &lt;a href=&quot;http://www.opengl-tutorials.org/&quot;&gt;www.opengl-tutorials.org&lt;/a&gt;. They setup the
OpenGL context using GLFW and GLEW. &lt;a href=&quot;http://glew.sourceforge.net/&amp;quot;&quot;&gt;GLEW&lt;/a&gt;
is the GL Extension Wrangler, a helper library to
determine which OpenGL extensions are available in run-time. With this two
libraries OpenGL 3.2 context creation is a piece of cake. First include GLEW
and GLFW. You must do this in that order as GLEW will complain if &lt;em&gt;gl.h&lt;/em&gt; is
already included:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Include GLEW&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;GL/glew.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Include GLFW&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;GL/glfw.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now it’s time to initialize GLFW and set the hints for the window so the
created OpenGL context is 3.2:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;glfwInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glfwOpenWindowHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLFW_OPENGL_VERSION_MAJOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glfwOpenWindowHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLFW_OPENGL_VERSION_MINOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glfwOpenWindowHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLFW_OPENGL_PROFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLFW_OPENGL_CORE_PROFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this a GLFW window can be opened with a OpenGL 3.2 context associated to
it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;glfwOpenWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLFW_WINDOW&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last step is to initialize GLEW to be able to use the core profile of
OpenGL 3.2. To do this, the experimental mode of GLEW must be activated:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;glewExperimental&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glewInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There we go. With this an OpenGL 3.2 context is created and we are ready to
issue OpenGL commands. Remember that OpenGL 3.2 is quite different to OpenGL
2.1, like for example no more glBegin()/glEnd commands are used to render
geometry. Instead use VBO (vertex buffer objects) to do it so.&lt;/p&gt;

&lt;p&gt;The last thing to remember is that you must link against GLFW and GLEW, as well
as against OpenGL. In Mac OS X this is  achieved by adding the following flags
while linking:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nt&quot;&gt;-lglfw&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lglew&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-framework&lt;/span&gt; OpenGL&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Happy OpenGL coding!!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/osx-and-opengl-3-2/&quot;&gt;OSX and OpenGL 3.2&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on February 24, 2013.&lt;/p&gt;

  </content>
</entry>


<entry>
  <title type="html"><![CDATA[OpenGL 3.2: shaders everywhere!]]></title>
  <link rel="alternate" type="text/html" href="http://www.robertocano.es/en/opengl-3-2-shaders-everywhere/" />
  <id>http://www.robertocano.es/en/opengl-3-2-shaders-everywhere</id>
  <published>2013-02-24T00:00:00+01:00</published>
  <updated>2013-02-24T00:00:00+01:00</updated>
  <author>
    <name></name>
    <uri>http://www.robertocano.es</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Now that I’m getting involved into OpenGL 3.2 I realize how different it is
from OpenGL 1.2 (the last one I learned long time ago). No more glBegin/glEnd
blocks and only VAOs (vertex array objects) and  VBOs (vertex buffer objects),
shaders and basically server side structures and processing.&lt;/p&gt;

&lt;p&gt;Today while trying out some demos and writing some example code to understand
better how all this new structures are working together I found out that I
really need a deep understanding of GLSL (GL Shading Language) to be able to do
some cool things.&lt;/p&gt;

&lt;p&gt;After managing to create a color cube using VBOs, I fancy trying to outline the
3D geometry as I thought it could look cool. However, I struggled doing it as
the only feasible way, as far as I could understand, is by using shaders. As
currently my knowledge of shaders is rather low, I couldn’t find a way to
create the outline.&lt;/p&gt;

&lt;p&gt;Anyhow I feel it is a quite powerful tool to generate really nice effects, but
I’ll have to wait until I’m confident with the basics of OpenGL 3.2 to be
prepared to tackle GLSL and understand its deepness.&lt;/p&gt;

&lt;p&gt;Another thing I found about OpenGL3.2 is that it eliminated the fixed pipeline
by which OpenGL pre 3.1 rendered the primitives (applying transformations,
rotation, scaling, MVP matrices, etc,,,) and now it is all done through
shaders. So the next demos I intended to do with VBOs and VAOs is not working
just because I need a simple shader to be incorporated to the rendering of the
scene!&lt;/p&gt;

&lt;p&gt;Next step, more VBO, camera and lighting. Set, ready, action!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.robertocano.es/en/opengl-3-2-shaders-everywhere/&quot;&gt;OpenGL 3.2: shaders everywhere!&lt;/a&gt; was originally published by Roberto Cano at &lt;a href=&quot;http://www.robertocano.es&quot;&gt;&lt;/a&gt; on February 24, 2013.&lt;/p&gt;

  </content>
</entry>

</feed>
